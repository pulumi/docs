#!/bin/bash
set -e

# This is the Pulumify GitHub Action container's entrypoint. It does the following:
#
#     * Anytime a pull request for a branch is updated (opened/edited/synchronized/etc),
#       the script checks for a Pulumi stack with the branch's name (with appropriate character
#       substitution to avoid illegal Pulumi stack names).
#
#         - The first time this branch is detected, a new stack is created.
#
#         - After that, and on all subsequent updates, that stack is updated. The Pulumi program
#           uses AWS S3 to host a static website, serving the specified content. This program uses
#           a configurable location in the Git repo (specified by PULUMIFY_ROOT).
#
#         - Each time an update is made, a comment is left behind on the pull request, with a URL.
#
#     * Upon closure of the pull request (e.g., due to merging), the branch is deleted.
#
# This allows easy review of static website changes in line with GitHub pull request workflows.

# Set up some variables so that the Pulumi CLI knows it's running in the context of GitHub.
if [ ! -z "$GITHUB_WORKFLOW" ]; then
    export PULUMI_CI_SYSTEM="GitHub"
    export PULUMI_CI_BUILD_ID=
    export PULUMI_CI_BUILD_TYPE=
    export PULUMI_CI_BUILD_URL=
    export PULUMI_CI_PULL_REQUEST_SHA="$GITHUB_SHA"
fi

# Extract the branch name and clean it to produce a stack name.
if [ -z "$GITHUB_REF" ]; then
    GITHUB_REF="refs/heads/master"
fi
PR_BRANCH=$(echo $GITHUB_REF | sed "s/refs\/heads\///g")
PULUMI_STACK_NAME=$(echo "pulumify-$PR_BRANCH" | sed "s/[^[:alnum:].-]/-/g")
echo "# PR stack name: $PULUMI_STACK_NAME"

# TODO(joe): post comments.

# Now attempt to change to the desired stack. Ignore errors, we'll check the result later.
pulumi stack select $PULUMI_STACK_NAME >/dev/null 2>&1 && \
    PULUMI_STACK_EXISTS=$? || PULUMI_STACK_EXISTS=$?

# Ensure we refresh the configuration if the stack actually exists.
if [ $PULUMI_STACK_EXISTS -eq 0 ]; then
    pulumi config refresh -f
fi

# Detect what PR action is being taken. If it's one of the edit actions, we will preview the changes;
# if it's a "close", we will delete the stack; otherwise, we exit cleanly because there's nothing to do.
PR_ACTION=$(cat "$GITHUB_EVENT_PATH" | jq -r ".action")
case "$PR_ACTION" in
    "opened" | "reopened" | "edited" | "synchronize")
        echo "# PR action '$PR_ACTION': updating content"

        if [ $PULUMI_STACK_EXISTS -ne 0 ]; then
            pulumi stack init $PULUMI_STACK_NAME
            pulumi config set root /app/${PULUMIFY_ROOT:-public}
            pulumi config set aws:region ${AWS_REGION:-us-east-1}
        fi

        # Now simply run an update to provision and/or update the static website.
        pulumi up --skip-preview
        ;;
    "closed")
        echo "# PR action '$PR_ACTION': destroying stack"

        # If the stack doesn't even exist, there's nothing to do. Otherwise, we must destroy and then
        # remove the resulting stack altogether.
        if [ $PULUMI_STACK_EXISTS -eq 0 ]; then
            pulumi destroy --skip-preview
            pulumi stack rm --yes
        else
            echo "# Stack has already been destroyed -- nothing more to do"
        fi
        ;;
    *)
        echo "# PR action is '$PR_ACTION'; nothing to do, so exiting"
        exit 0
        ;;
esac
