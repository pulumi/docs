#!/usr/bin/env python3
"""
Apply Historical Alias Fixes

Reads the fixes generated by generate-historical-fixes.py and applies them
to the markdown files by updating their frontmatter aliases sections.
"""

import sys
import json
from pathlib import Path
from typing import List, Tuple

def update_frontmatter_aliases(file_path: Path, new_aliases: List[str]) -> bool:
    """
    Update the aliases section in a markdown file's frontmatter.
    Returns True if successful, False otherwise.
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            lines = f.readlines()

        # Find frontmatter boundaries
        frontmatter_start = -1
        frontmatter_end = -1
        for i, line in enumerate(lines):
            if line.strip() == '---':
                if frontmatter_start == -1:
                    frontmatter_start = i
                else:
                    frontmatter_end = i
                    break

        if frontmatter_start == -1 or frontmatter_end == -1:
            print(f"ERROR: Could not find frontmatter in {file_path}", file=sys.stderr)
            return False

        # Find existing aliases section in frontmatter
        aliases_start = -1
        aliases_end = -1
        for i in range(frontmatter_start + 1, frontmatter_end):
            line = lines[i]
            if line.strip().startswith('aliases:'):
                aliases_start = i
                # Find end of aliases section
                for j in range(i + 1, frontmatter_end):
                    next_line = lines[j]
                    # End if we hit a non-indented line or a line that doesn't start with -
                    if next_line.strip() and not next_line.startswith((' ', '\t', '-')):
                        aliases_end = j
                        break
                else:
                    # Aliases section goes to end of frontmatter
                    aliases_end = frontmatter_end
                break

        # Generate new aliases section
        new_aliases_lines = ['aliases:\n']
        for alias in new_aliases:
            new_aliases_lines.append(f'  - {alias}\n')

        # Reconstruct the file
        new_lines = []

        if aliases_start != -1:
            # Replace existing aliases section
            new_lines.extend(lines[:aliases_start])
            new_lines.extend(new_aliases_lines)
            new_lines.extend(lines[aliases_end:])
        else:
            # Add new aliases section after title (or at start of frontmatter if no title)
            # Try to find title field to insert after it
            title_line = -1
            for i in range(frontmatter_start + 1, frontmatter_end):
                if lines[i].strip().startswith('title:'):
                    title_line = i
                    break

            if title_line != -1:
                # Insert after title
                new_lines.extend(lines[:title_line + 1])
                new_lines.extend(new_aliases_lines)
                new_lines.extend(lines[title_line + 1:])
            else:
                # Insert at start of frontmatter
                new_lines.extend(lines[:frontmatter_start + 1])
                new_lines.extend(new_aliases_lines)
                new_lines.extend(lines[frontmatter_start + 1:])

        # Write back to file
        with open(file_path, 'w', encoding='utf-8') as f:
            f.writelines(new_lines)

        return True

    except Exception as e:
        print(f"ERROR: Failed to update {file_path}: {e}", file=sys.stderr)
        return False

def main():
    script_dir = Path(__file__).parent
    repo_root = script_dir.parent.parent
    fixes_file = script_dir / 'historical-fixes.json'

    if not fixes_file.exists():
        print(f"ERROR: Fixes file not found: {fixes_file}", file=sys.stderr)
        print("Run generate-historical-fixes.py first", file=sys.stderr)
        sys.exit(1)

    # Load fixes
    print("Loading fixes from historical-fixes.json...")
    with open(fixes_file, 'r', encoding='utf-8') as f:
        fixes = json.load(f)

    print(f"Found {len(fixes)} files to fix")
    print()

    # Confirm before proceeding
    print("‚ö†Ô∏è  WARNING: This will modify markdown files in place!")
    print("   Make sure you have committed any important changes first.")
    print()
    response = input("Proceed with applying fixes? (yes/no): ")

    if response.lower() not in ['yes', 'y']:
        print("Aborted.")
        sys.exit(0)

    print()
    print("Applying fixes...")
    print()

    # Apply fixes
    success_count = 0
    error_count = 0

    for i, fix in enumerate(fixes, 1):
        file_path = repo_root / fix['file_path']
        new_aliases = fix['new_aliases']

        print(f"[{i}/{len(fixes)}] Updating {fix['file_path']}...", end=' ')

        if update_frontmatter_aliases(file_path, new_aliases):
            success_count += 1
            print("‚úì")
        else:
            error_count += 1
            print("‚ùå")

    # Summary
    print()
    print("="*80)
    print("=== APPLICATION SUMMARY ===")
    print("="*80)
    print(f"Total files processed:  {len(fixes)}")
    print(f"Successfully updated:   ‚úì {success_count}")
    print(f"Errors:                 ‚ùå {error_count}")
    print()

    if error_count == 0:
        print("üéâ ALL FIXES APPLIED SUCCESSFULLY!")
        print()
        print("üí° Next steps:")
        print("   1. Review the changes with: git diff")
        print("   2. Re-run verify-all-historical-aliases.py to verify")
        print("   3. If everything looks good, commit the changes")
        sys.exit(0)
    else:
        print("‚ö†Ô∏è  SOME FIXES FAILED")
        print("   Review the errors above and fix manually if needed")
        sys.exit(1)

if __name__ == '__main__':
    main()
